#!/usr/bin/env tclsh
set testdir [file dirname $argv0]
source $testdir/tester.tcl

do_execsql_test_on_specific_db {:memory:} insert_expr_constraint_check-1 {
    CREATE TABLE t (x INTEGER check (x % 2 == 0));
    INSERT INTO t VALUES (2);
    INSERT INTO t VALUES (6);
    SELECT * FROM t;
} {2
6}

do_execsql_test_in_memory_any_error insert_expr_constraint_check-2 {
    CREATE TABLE t (x INTEGER check (x % 2 == 0));
    INSERT INTO t VALUES (1);
}

# CHECK expression can refer to many columns
do_execsql_test_on_specific_db {:memory:} insert_expr_constraint_check-3 {
    CREATE TABLE t (a int, x INTEGER check ((a + x) % 2 == 0));
    INSERT INTO t VALUES (4, 2);
    INSERT INTO t VALUES (1, 5);
    SELECT * FROM t;
} {4|2
1|5}

# CHECK expressions are disabled if its expression evaluates to NULL
do_execsql_test_on_specific_db {:memory:} insert_expr_constraint_check-4 {
    CREATE TABLE t (a int, x INTEGER check ((a + x) % 2 == 0));
    INSERT INTO t (x) VALUES (99);
    INSERT INTO t (a) VALUES (1);
    INSERT INTO t (a, x) VALUES (3, NULL);
    SELECT * FROM t;
} {|99
1|
3|}

do_execsql_test_on_specific_db {:memory:} insert_expr_constraint_check-5 {
    CREATE TABLE t (a int, b INTEGER check ((a + b) % 2 == 0));
    INSERT INTO t VALUES (3, 1), (1, 5), (2, 2);
    SELECT * FROM t;
} {3|1
1|5
2|2}

do_execsql_test_in_memory_any_error insert_expr_constraint_check-6 {
    CREATE TABLE t (a int, b INTEGER check (0));
    INSERT INTO t VALUES (3, 1);
}

do_execsql_test_in_memory_any_error insert_expr_constraint_check_multiple-6 {
    CREATE TABLE t (a int, b INTEGER check (0));
    INSERT INTO t VALUES (3, 1), (99, 88);
}

do_execsql_test_in_memory_any_error insert_expr_constraint_check-constant_expr-6 {
    CREATE TABLE t (a int, b INTEGER check (5-5));
    INSERT INTO t VALUES (3, 1);
}

do_execsql_test_in_memory_any_error insert_expr_constraint_check-constant_named-6 {
    CREATE TABLE t (a int, b INTEGER check (5-5), c int);
    INSERT INTO t (a, c) VALUES (3, 1);
}


do_execsql_test_in_memory_any_error insert_expr_constraint_check-7 {
    CREATE TABLE t (a int, b INTEGER check ((a + b) % 2 == 0));
    INSERT INTO t VALUES (3, 1), (1, 5), (2, 1);
}

# column 'a' is not refered to
do_execsql_test_on_specific_db {:memory:} insert_expr_constraint_check-8 {
    CREATE TABLE t (a int, b INTEGER check ((a + b) % 2 == 0));
    INSERT INTO t (b) VALUES (1), (5), (1);
    SELECT * FROM t;
} {|1
|5
|1}

do_execsql_test_on_specific_db {:memory:} update_constraint_checks_1 {
  CREATE TABLE t (c int, a int, b INTEGER check ((a + b) % 2 = 0));
  insert into t values (1, 2, 0);
  insert into t values (99, 37, 1);
  update t set a = 5, b = 1;
  select * from t;
} {1|5|1
99|5|1
}

# a check constraint should raise an error
do_execsql_test_in_memory_any_error update_constraint_checks_2 {
  CREATE TABLE t (c int, a int, b INTEGER check ((a + b) % 2 = 0));
  insert into t values (1, 2, 0);
  insert into t values (99, 37, 1);
  update t set a = 5, b = 2;
}

# disable a check constraint, when any column is set to null
do_execsql_test_on_specific_db {:memory:} update_constraint_checks_3 {
  CREATE TABLE t (c int, a int, b INTEGER check ((a + b) % 2 = 0));
  insert into t values (1, 2, 0);
  insert into t values (99, 37, 1);
  update t set a = NULL, b = 3;
  select * from t;
} {1||3
99||3
}

# disable a check constraint, when any column is set to null
do_execsql_test_on_specific_db {:memory:} update_constraint_checks_4 {
  CREATE TABLE t (c int, a int, b INTEGER check ((a + b) % 2 = 0));
  insert into t values (1, 2, 0);
  insert into t values (99, 37, 1);
  update t set b = NULL;
  select * from t;
} {1|2|
99|37|
}

# disable a check constraint, when any column is set to null
do_execsql_test_on_specific_db {:memory:} update_constraint_checks_5 {
  CREATE TABLE t (c int, a int, b INTEGER check ((a + b) % 2 = 0));
  insert into t values (1, 2, 0);
  insert into t values (99, 37, 1);
  update t set a = NULL;
  select * from t;
} {1||0
99||1
}

# referred columns
do_execsql_test_in_memory_any_error update_constraint_checks_6 {
  CREATE TABLE t (c int, a int, b INTEGER check ((a + b) % 2 = 0));
  insert into t values (1, 2, 2);
  insert into t values (99, 37, 1);
  update t set a = 5;
}

# referred columns
do_execsql_test_in_memory_any_error update_constraint_checks_7 {
  CREATE TABLE t (c int, a int, b INTEGER check ((a + b) % 2 = 0));
  insert into t values (1, 2, 2);
  insert into t values (99, 37, 1);
  update t set a = 5;
}

# referred columns
do_execsql_test_in_memory_any_error update_constraint_checks_8 {
  CREATE TABLE t (c int, a int, b INTEGER check ((a + b) % 2 = 0));
  insert into t values (1, 2, 2);
  insert into t values (99, 4, 4);
  update t set b = 5;
}

do_execsql_test_in_memory_any_error update_constraint_checks_9 {
  CREATE TABLE t (c int, a int, b INTEGER check (5-5));
  insert into t values (1, 2, null);
  update t set b = 5;
}

do_execsql_test_in_memory_any_error insert_table_constraint_checks_10 {
  CREATE TABLE t (c int, a int, b int, check ((a + b) % 2 = 0));
  insert into t values (1, 2, 3);
}

do_execsql_test_in_memory_any_error update_table_constraint_checks_11 {
  CREATE TABLE t (c int, a int, b int, check ((a + b) % 2 = 0));
  insert into t values (1, 2, 2);
  update t set b = 5;
}

do_execsql_test_in_memory_any_error update_table_constraint_checks_12 {
  CREATE TABLE t (c int, a int, b int, constraint check_is_even check ((a + b) % 2 = 0));
  insert into t values (1, 2, 2);
  update t set b = 5;
}
